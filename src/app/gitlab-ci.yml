# https://gitlab.com/snippets/1698943

# Based on :
# https://about.gitlab.com/2016/11/30/setting-up-gitlab-ci-for-android-projects/ for the structure
# https://raw.githubusercontent.com/travis-ci/travis-cookbooks/0f497eb71291b52a703143c5cd63a217c8766dc9/community-cookbooks/android-sdk/files/default/android-wait-for-emulator for a wait android emulator script example

image: openjdk:8-jdk

variables:
  ANDROID_SDK_TOOLS_VERSION: "https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip" # Latest version of "Android command line tools" at the end of https://developer.android.com/studio/index.html
  ANDROID_SDK_TOOLS_CHECKSUM: "444e22ce8ca0f67353bda4b85175ed3731cae3ffa695ca18119cbacef1c1bea0" # SHA-256 checksum of "Android command line tools"
  
  ANDROID_HOME: "./android-sdk-linux"

stages:
  - test
  - quality
  - build

before_script:
  # Get tools version of project
  - export ANDROID_COMPILE_SDK=`egrep '^[[:blank:]]+compileSdkVersion'  app/build.gradle | awk '{print $2}'`
  - export ANDROID_BUILD_TOOLS=`egrep '^[[:blank:]]+buildToolsVersion'  app/build.gradle | sed s/\"//g | awk '{print $2}'`

  - |-
    # Information used for debugging
    echo "/---------------------- JOB INFO ----------------------/"
    echo "CI_JOB_ID ${CI_JOB_ID}"
    echo "CI_JOB_MANUAL ${CI_JOB_MANUAL}"
    echo "CI_JOB_NAME ${CI_JOB_NAME}"
    echo "CI_JOB_STAGE ${CI_JOB_STAGE}"
    echo "/--------------------- RUNNER INFO --------------------/"
    echo "CI_RUNNER_ID ${CI_RUNNER_ID}"
    echo "CI_RUNNER_TAGS ${CI_RUNNER_TAGS}"
    echo "CI_RUNNER_DESCRIPTION ${CI_RUNNER_DESCRIPTION}"
    echo "/---------------------- CPU INFO ----------------------/"
    cat /proc/cpuinfo # To kwow if CPU supports KVM (for Android emulators), the flags category must contain "vmx" or "svm" ; egrep '^flags.*(vmx|svm)' /proc/cpuinfo
    echo "/-------------------- PROJECT INFO --------------------/"
    echo "ANDROID_COMPILE_SDK ${ANDROID_COMPILE_SDK}"
    echo "ANDROID_BUILD_TOOLS ${ANDROID_BUILD_TOOLS}"
    echo "/------------------------------------------------------/"

  - |-
    # Install SDK Tools
    echo "create ${ANDROID_HOME} folder path"
    mkdir -p "${ANDROID_HOME}"
    echo "download SDK Tools and save to ${ANDROID_HOME}.zip"
    wget -q -O "${ANDROID_HOME}.zip" "${ANDROID_SDK_TOOLS_VERSION}"
    
    checksum=`sha256sum ${ANDROID_HOME}.zip | awk '{print $1}'`
    if [[ ! "${checksum}" = "${ANDROID_SDK_TOOLS_CHECKSUM}" ]] ; then
      echo "Fatal : Bad Android SDK Tools checksum ; calculated ${checksum} ; expected ${ANDROID_SDK_TOOLS_CHECKSUM}"
      
      # Send webhook notification
      #curl -X POST -H 'Content-type: application/json' \
      #  --data '{"text":"SDK Bad Checksum"}' \
      #  $WEBHOOK_NOTIF
      
      exit 1
    fi
    
    echo "unzip SDK Tools to ${ANDROID_HOME}"
    unzip -q "${ANDROID_HOME}.zip" -d "${ANDROID_HOME}"

  - export PATH=$PATH:$ANDROID_HOME/tools/bin/ # Access to sdkmanager and avdmanager command

  # Install, update and accept licenses for android tools, set path
  - echo y | sdkmanager "platform-tools"
  - echo y | sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}"
  - echo y | sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}"
  - echo y | sdkmanager "extras;google;m2repository"
  - echo y | sdkmanager "extras;android;m2repository"
  - echo y | sdkmanager "extras;google;google_play_services"
  - echo y | sdkmanager --update
  - echo y | sdkmanager --licenses > android-licences.log

  - chmod +x ./gradlew # Set rights for gradlew project usage

test_implementation:
  stage: test
  script:
    - ./gradlew test
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/tests/

android_test_implementation:
  stage: test
  tags:
    # *** Only if you use shared runners *** #
    - do # Target only machines that support KVM (for Android emulators) for this job. Not the most beautiful, but it works.
  script:
    - export EMULATOR_IMAGE="system-images;android-${ANDROID_COMPILE_SDK};google_apis;x86"

    # Install emulator tools and image
    - echo y | sdkmanager "emulator"
    - echo y | sdkmanager "$EMULATOR_IMAGE"
    - echo y | sdkmanager --update
    - echo y | sdkmanager --licenses

    - export PATH=$PATH:$ANDROID_HOME/emulator/:$ANDROID_HOME/platform-tools/ # Access to emulator and adb command

    # Create and launch emulator
    - echo n | avdmanager -s create avd -n test -k "${EMULATOR_IMAGE}" -f
    - emulator -avd test -no-window -no-audio &

    - |-
      # Wait emulator bootanim stopping
      set +e

      bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
      failcounter=0
      timeout_in_sec=300

      until [[ "$bootanim" =~ "stopped" ]]; do

        # Bootanim timeout
        if [[ $failcounter -gt timeout_in_sec ]]; then
          echo "Failed to start emulator : Timeout ($timeout_in_sec seconds) reached;"
          
          # Send webhook notification
          #curl -X POST -H 'Content-type: application/json' \
          #  --data '{"text":"Emulator timeout : ${bootanim}"}' \
          #  $WEBHOOK_NOTIF

          exit 1
        fi

        # Emulator launch failed
        if [[ ! "$bootanim" =~ "daemon not running; starting now" && ! "$bootanim" =~ "device offline" && ! "$bootanim" = "" && ! "$bootanim" = "running" ]]; then
          echo "Failed to start emulator : ${bootanim}"
          
          # Send webhook notification
          #curl -X POST -H 'Content-type: application/json' \
          #  --data '{"text":"Emulator error : ${bootanim}"}' \
          #  $WEBHOOK_NOTIF

          exit 1
        fi
        
        echo "Wait emulator (state: ${bootanim}) ; Timeout $(($timeout_in_sec-$failcounter))"
        sleep 1
        let "failcounter += 1"
        
        bootanim=`adb -e shell getprop init.svc.bootanim 2>&1 &`
      done

      echo "Emulator is ready"   

    - adb shell input keyevent 82

    - ./gradlew connectedAndroidTest
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/androidTests/

gradlew_lint:
  stage: quality
  script:
    - ./gradlew lint
  artifacts:
    name: "reports_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/reports/

android_build:
  stage: build
  script:
    - ./gradlew clean assembleRelease
  artifacts:
    name: "build_${CI_PROJECT_NAME}_${CI_BUILD_REF_NAME}_${CI_JOB_NAME}_${CI_JOB_ID}"
    when: always
    paths:
      - app/build/outputs/apk/
      - app/build/outputs/mapping/
